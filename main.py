from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes, ConversationHandler
)
import logging

logging.basicConfig(level=logging.INFO)

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
TEXT, LINK, PHOTO, BOT_LINK, WAIT_TEXT, WAIT_LINK = range(6)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_data_temp = {}

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data_temp.pop(update.effective_chat.id, None)  # —Å–±—Ä–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ

    keyboard = [
        [InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç", callback_data="text_input")],
        [InlineKeyboardButton("üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_text")]
    ]
    await update.message.reply_text("–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—é?",
                                    reply_markup=InlineKeyboardMarkup(keyboard))
    return TEXT

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞: –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫
async def handle_text_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == "text_input":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:")
        return WAIT_TEXT
    else:
        user_data_temp[query.from_user.id] = {"text": ""}
        await query.edit_message_text("–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîó –í–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É", callback_data="link_input")],
                [InlineKeyboardButton("üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_link")]
            ])
        )
        return LINK

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
async def get_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data_temp[update.effective_chat.id] = {"text": update.message.text}
    await update.message.reply_text("–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîó –í–≤–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É", callback_data="link_input")],
            [InlineKeyboardButton("üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_link")]
        ])
    )
    return LINK

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞: –≤–≤–æ–¥ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫
async def handle_link_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    if query.data == "link_input":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É:")
        return WAIT_LINK
    else:
        user_data_temp[query.from_user.id]["link"] = ""
        await query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å)",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo")]
            ])
        )
        return PHOTO

# –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É
async def get_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_data_temp[update.effective_chat.id]["link"] = update.message.text
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å)",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üö´ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo")]
        ])
    )
    return PHOTO

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ (–µ—Å–ª–∏ —Å–ª—É—á–∞–π–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç)
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.photo:
        photo_file_id = update.message.photo[-1].file_id
        user_data_temp[update.effective_chat.id]["photo"] = photo_file_id
    else:
        user_data_temp[update.effective_chat.id]["photo"] = ""

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://t.me/your_bot):")
    return BOT_LINK

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –¥–ª—è —Ñ–æ—Ç–æ
async def skip_photo_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    user_data_temp[update.callback_query.from_user.id]["photo"] = ""
    await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://t.me/your_bot):")
    return BOT_LINK

# –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
async def get_bot_link(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_chat.id
    data = user_data_temp.get(user_id, {})
    data["bot_link"] = update.message.text

    bot_username = data["bot_link"].split("https://t.me/")[-1].strip("/")
    start_param = "gift123"  # –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ª—é–±–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä

    url_with_param = f"https://t.me/{bot_username}?start={start_param}"

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üéÅ Get a gift", url=url_with_param)]
    ])

    parts = []
    if data.get("text"):
        parts.append(data["text"])
    if data.get("link"):
        parts.append(data["link"])
    final_text = "\n".join(parts) if parts else " "

    if data.get("photo"):
        await update.message.reply_photo(
            photo=data["photo"],
            caption=final_text,
            reply_markup=keyboard
        )
    else:
        await update.message.reply_text(
            text=final_text,
            reply_markup=keyboard
        )

    user_data_temp.pop(user_id, None)
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    user_data_temp.pop(update.effective_chat.id, None)
    return ConversationHandler.END

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
import os
def main():
    BOT_TOKEN = "7882247659:AAGzrdYeTyOF46BsBsaIWDtRpJnYUxDI_rk"
    # BOT_TOKEN = os.getenv("BOT_TOKEN")  # ‚úÖ –∑–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã
    app = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            TEXT: [CallbackQueryHandler(handle_text_choice)],
            WAIT_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_text)],
            LINK: [CallbackQueryHandler(handle_link_choice)],
            WAIT_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_link)],
            PHOTO: [
                MessageHandler(filters.PHOTO | filters.TEXT & ~filters.COMMAND, handle_photo),
                CallbackQueryHandler(skip_photo_callback, pattern="skip_photo")
            ],
            BOT_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_bot_link)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True  # üí° –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–Ω–æ–≤–∞ –≤—ã–∑–≤–∞—Ç—å /start –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()

